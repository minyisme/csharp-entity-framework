//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EntityFrameworkPractice
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AdventureWorksEntities : DbContext
    {
        public AdventureWorksEntities()
            : base("name=AdventureWorksEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerAddress> CustomerAddresses { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductCategory> ProductCategories { get; set; }
        public virtual DbSet<ProductDescription> ProductDescriptions { get; set; }
        public virtual DbSet<ProductModel> ProductModels { get; set; }
        public virtual DbSet<ProductModelProductDescription> ProductModelProductDescriptions { get; set; }
        public virtual DbSet<SalesOrderDetail> SalesOrderDetails { get; set; }
        public virtual DbSet<SalesOrderHeader> SalesOrderHeaders { get; set; }
        public virtual DbSet<vGetAllCategory> vGetAllCategories { get; set; }
        public virtual DbSet<vProductAndDescription> vProductAndDescriptions { get; set; }
        public virtual DbSet<vProductModelCatalogDescription> vProductModelCatalogDescriptions { get; set; }
        public virtual DbSet<database_firewall_rules> database_firewall_rules { get; set; }
    
        [DbFunction("AdventureWorksEntities", "ufnGetAllCategories")]
        public virtual IQueryable<ufnGetAllCategories_Result> ufnGetAllCategories()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufnGetAllCategories_Result>("[AdventureWorksEntities].[ufnGetAllCategories]()");
        }
    
        [DbFunction("AdventureWorksEntities", "ufnGetCustomerInformation")]
        public virtual IQueryable<ufnGetCustomerInformation_Result> ufnGetCustomerInformation(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ufnGetCustomerInformation_Result>("[AdventureWorksEntities].[ufnGetCustomerInformation](@CustomerID)", customerIDParameter);
        }
    
        public virtual int cuspBuildVersionDelete(Nullable<byte> systemInformationID)
        {
            var systemInformationIDParameter = systemInformationID.HasValue ?
                new ObjectParameter("SystemInformationID", systemInformationID) :
                new ObjectParameter("SystemInformationID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspBuildVersionDelete", systemInformationIDParameter);
        }
    
        public virtual int cuspErrorLogDelete(Nullable<int> errorLogID)
        {
            var errorLogIDParameter = errorLogID.HasValue ?
                new ObjectParameter("ErrorLogID", errorLogID) :
                new ObjectParameter("ErrorLogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspErrorLogDelete", errorLogIDParameter);
        }
    
        public virtual int cuspErrorLogInsert(Nullable<System.DateTime> errorTime, string userName, Nullable<int> errorNumber, Nullable<int> errorSeverity, Nullable<int> errorState, string errorProcedure, Nullable<int> errorLine, string errorMessage)
        {
            var errorTimeParameter = errorTime.HasValue ?
                new ObjectParameter("ErrorTime", errorTime) :
                new ObjectParameter("ErrorTime", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var errorNumberParameter = errorNumber.HasValue ?
                new ObjectParameter("ErrorNumber", errorNumber) :
                new ObjectParameter("ErrorNumber", typeof(int));
    
            var errorSeverityParameter = errorSeverity.HasValue ?
                new ObjectParameter("ErrorSeverity", errorSeverity) :
                new ObjectParameter("ErrorSeverity", typeof(int));
    
            var errorStateParameter = errorState.HasValue ?
                new ObjectParameter("ErrorState", errorState) :
                new ObjectParameter("ErrorState", typeof(int));
    
            var errorProcedureParameter = errorProcedure != null ?
                new ObjectParameter("ErrorProcedure", errorProcedure) :
                new ObjectParameter("ErrorProcedure", typeof(string));
    
            var errorLineParameter = errorLine.HasValue ?
                new ObjectParameter("ErrorLine", errorLine) :
                new ObjectParameter("ErrorLine", typeof(int));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspErrorLogInsert", errorTimeParameter, userNameParameter, errorNumberParameter, errorSeverityParameter, errorStateParameter, errorProcedureParameter, errorLineParameter, errorMessageParameter);
        }
    
        public virtual int cuspErrorLogSelect(Nullable<int> errorLogID)
        {
            var errorLogIDParameter = errorLogID.HasValue ?
                new ObjectParameter("ErrorLogID", errorLogID) :
                new ObjectParameter("ErrorLogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspErrorLogSelect", errorLogIDParameter);
        }
    
        public virtual int cuspErrorLogUpdate(Nullable<int> errorLogID, Nullable<System.DateTime> errorTime, string userName, Nullable<int> errorNumber, Nullable<int> errorSeverity, Nullable<int> errorState, string errorProcedure, Nullable<int> errorLine, string errorMessage)
        {
            var errorLogIDParameter = errorLogID.HasValue ?
                new ObjectParameter("ErrorLogID", errorLogID) :
                new ObjectParameter("ErrorLogID", typeof(int));
    
            var errorTimeParameter = errorTime.HasValue ?
                new ObjectParameter("ErrorTime", errorTime) :
                new ObjectParameter("ErrorTime", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var errorNumberParameter = errorNumber.HasValue ?
                new ObjectParameter("ErrorNumber", errorNumber) :
                new ObjectParameter("ErrorNumber", typeof(int));
    
            var errorSeverityParameter = errorSeverity.HasValue ?
                new ObjectParameter("ErrorSeverity", errorSeverity) :
                new ObjectParameter("ErrorSeverity", typeof(int));
    
            var errorStateParameter = errorState.HasValue ?
                new ObjectParameter("ErrorState", errorState) :
                new ObjectParameter("ErrorState", typeof(int));
    
            var errorProcedureParameter = errorProcedure != null ?
                new ObjectParameter("ErrorProcedure", errorProcedure) :
                new ObjectParameter("ErrorProcedure", typeof(string));
    
            var errorLineParameter = errorLine.HasValue ?
                new ObjectParameter("ErrorLine", errorLine) :
                new ObjectParameter("ErrorLine", typeof(int));
    
            var errorMessageParameter = errorMessage != null ?
                new ObjectParameter("ErrorMessage", errorMessage) :
                new ObjectParameter("ErrorMessage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspErrorLogUpdate", errorLogIDParameter, errorTimeParameter, userNameParameter, errorNumberParameter, errorSeverityParameter, errorStateParameter, errorProcedureParameter, errorLineParameter, errorMessageParameter);
        }
    
        public virtual int uspLogError(ObjectParameter errorLogID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogError", errorLogID);
        }
    
        public virtual int uspPrintError()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspPrintError");
        }
    
        public virtual int cuspAddressDelete(Nullable<int> addressID)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspAddressDelete", addressIDParameter);
        }
    
        public virtual ObjectResult<cuspAddressInsert_Result> cuspAddressInsert(string addressLine1, string addressLine2, string city, string stateProvince, string countryRegion, string postalCode, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateProvinceParameter = stateProvince != null ?
                new ObjectParameter("StateProvince", stateProvince) :
                new ObjectParameter("StateProvince", typeof(string));
    
            var countryRegionParameter = countryRegion != null ?
                new ObjectParameter("CountryRegion", countryRegion) :
                new ObjectParameter("CountryRegion", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspAddressInsert_Result>("cuspAddressInsert", addressLine1Parameter, addressLine2Parameter, cityParameter, stateProvinceParameter, countryRegionParameter, postalCodeParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<cuspAddressSelect_Result> cuspAddressSelect(Nullable<int> addressID)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspAddressSelect_Result>("cuspAddressSelect", addressIDParameter);
        }
    
        public virtual int cuspAddressUpdate(Nullable<int> addressID, string addressLine1, string addressLine2, string city, string stateProvince, string countryRegion, string postalCode, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var addressLine1Parameter = addressLine1 != null ?
                new ObjectParameter("AddressLine1", addressLine1) :
                new ObjectParameter("AddressLine1", typeof(string));
    
            var addressLine2Parameter = addressLine2 != null ?
                new ObjectParameter("AddressLine2", addressLine2) :
                new ObjectParameter("AddressLine2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateProvinceParameter = stateProvince != null ?
                new ObjectParameter("StateProvince", stateProvince) :
                new ObjectParameter("StateProvince", typeof(string));
    
            var countryRegionParameter = countryRegion != null ?
                new ObjectParameter("CountryRegion", countryRegion) :
                new ObjectParameter("CountryRegion", typeof(string));
    
            var postalCodeParameter = postalCode != null ?
                new ObjectParameter("PostalCode", postalCode) :
                new ObjectParameter("PostalCode", typeof(string));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspAddressUpdate", addressIDParameter, addressLine1Parameter, addressLine2Parameter, cityParameter, stateProvinceParameter, countryRegionParameter, postalCodeParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual int cuspCustomerAddressDelete(Nullable<int> addressID)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspCustomerAddressDelete", addressIDParameter);
        }
    
        public virtual ObjectResult<cuspCustomerAddressInsert_Result> cuspCustomerAddressInsert(string addressType, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var addressTypeParameter = addressType != null ?
                new ObjectParameter("AddressType", addressType) :
                new ObjectParameter("AddressType", typeof(string));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspCustomerAddressInsert_Result>("cuspCustomerAddressInsert", addressTypeParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<cuspCustomerAddressSelect_Result> cuspCustomerAddressSelect(Nullable<int> addressID)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspCustomerAddressSelect_Result>("cuspCustomerAddressSelect", addressIDParameter);
        }
    
        public virtual int cuspCustomerAddressUpdate(Nullable<int> addressID, string addressType, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var addressIDParameter = addressID.HasValue ?
                new ObjectParameter("AddressID", addressID) :
                new ObjectParameter("AddressID", typeof(int));
    
            var addressTypeParameter = addressType != null ?
                new ObjectParameter("AddressType", addressType) :
                new ObjectParameter("AddressType", typeof(string));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspCustomerAddressUpdate", addressIDParameter, addressTypeParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual int cuspCustomerDelete(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspCustomerDelete", customerIDParameter);
        }
    
        public virtual ObjectResult<cuspCustomerInsert_Result> cuspCustomerInsert(Nullable<bool> nameStyle, string title, string firstName, string middleName, string lastName, string suffix, string companyName, string salesPerson, string emailAddress, string phone, string passwordHash, string passwordSalt, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var nameStyleParameter = nameStyle.HasValue ?
                new ObjectParameter("NameStyle", nameStyle) :
                new ObjectParameter("NameStyle", typeof(bool));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var salesPersonParameter = salesPerson != null ?
                new ObjectParameter("SalesPerson", salesPerson) :
                new ObjectParameter("SalesPerson", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspCustomerInsert_Result>("cuspCustomerInsert", nameStyleParameter, titleParameter, firstNameParameter, middleNameParameter, lastNameParameter, suffixParameter, companyNameParameter, salesPersonParameter, emailAddressParameter, phoneParameter, passwordHashParameter, passwordSaltParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<cuspCustomerSelect_Result> cuspCustomerSelect(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspCustomerSelect_Result>("cuspCustomerSelect", customerIDParameter);
        }
    
        public virtual int cuspCustomerUpdate(Nullable<int> customerID, Nullable<bool> nameStyle, string title, string firstName, string middleName, string lastName, string suffix, string companyName, string salesPerson, string emailAddress, string phone, string passwordHash, string passwordSalt, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var nameStyleParameter = nameStyle.HasValue ?
                new ObjectParameter("NameStyle", nameStyle) :
                new ObjectParameter("NameStyle", typeof(bool));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var suffixParameter = suffix != null ?
                new ObjectParameter("Suffix", suffix) :
                new ObjectParameter("Suffix", typeof(string));
    
            var companyNameParameter = companyName != null ?
                new ObjectParameter("CompanyName", companyName) :
                new ObjectParameter("CompanyName", typeof(string));
    
            var salesPersonParameter = salesPerson != null ?
                new ObjectParameter("SalesPerson", salesPerson) :
                new ObjectParameter("SalesPerson", typeof(string));
    
            var emailAddressParameter = emailAddress != null ?
                new ObjectParameter("EmailAddress", emailAddress) :
                new ObjectParameter("EmailAddress", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var passwordHashParameter = passwordHash != null ?
                new ObjectParameter("PasswordHash", passwordHash) :
                new ObjectParameter("PasswordHash", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspCustomerUpdate", customerIDParameter, nameStyleParameter, titleParameter, firstNameParameter, middleNameParameter, lastNameParameter, suffixParameter, companyNameParameter, salesPersonParameter, emailAddressParameter, phoneParameter, passwordHashParameter, passwordSaltParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual int cuspProductCategoryDelete(Nullable<int> productCategoryID)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspProductCategoryDelete", productCategoryIDParameter);
        }
    
        public virtual ObjectResult<cuspProductCategoryInsert_Result> cuspProductCategoryInsert(Nullable<int> parentProductCategoryID, string name, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var parentProductCategoryIDParameter = parentProductCategoryID.HasValue ?
                new ObjectParameter("ParentProductCategoryID", parentProductCategoryID) :
                new ObjectParameter("ParentProductCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspProductCategoryInsert_Result>("cuspProductCategoryInsert", parentProductCategoryIDParameter, nameParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<cuspProductCategorySelect_Result> cuspProductCategorySelect(Nullable<int> productCategoryID)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspProductCategorySelect_Result>("cuspProductCategorySelect", productCategoryIDParameter);
        }
    
        public virtual int cuspProductCategoryUpdate(Nullable<int> productCategoryID, Nullable<int> parentProductCategoryID, string name, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var parentProductCategoryIDParameter = parentProductCategoryID.HasValue ?
                new ObjectParameter("ParentProductCategoryID", parentProductCategoryID) :
                new ObjectParameter("ParentProductCategoryID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspProductCategoryUpdate", productCategoryIDParameter, parentProductCategoryIDParameter, nameParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual int cuspProductDelete(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspProductDelete", productIDParameter);
        }
    
        public virtual int cuspProductDescriptionDelete(Nullable<int> productDescriptionID)
        {
            var productDescriptionIDParameter = productDescriptionID.HasValue ?
                new ObjectParameter("ProductDescriptionID", productDescriptionID) :
                new ObjectParameter("ProductDescriptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspProductDescriptionDelete", productDescriptionIDParameter);
        }
    
        public virtual ObjectResult<cuspProductDescriptionInsert_Result> cuspProductDescriptionInsert(string description, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspProductDescriptionInsert_Result>("cuspProductDescriptionInsert", descriptionParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<cuspProductDescriptionSelect_Result> cuspProductDescriptionSelect(Nullable<int> productDescriptionID)
        {
            var productDescriptionIDParameter = productDescriptionID.HasValue ?
                new ObjectParameter("ProductDescriptionID", productDescriptionID) :
                new ObjectParameter("ProductDescriptionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspProductDescriptionSelect_Result>("cuspProductDescriptionSelect", productDescriptionIDParameter);
        }
    
        public virtual int cuspProductDescriptionUpdate(Nullable<int> productDescriptionID, string description, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var productDescriptionIDParameter = productDescriptionID.HasValue ?
                new ObjectParameter("ProductDescriptionID", productDescriptionID) :
                new ObjectParameter("ProductDescriptionID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspProductDescriptionUpdate", productDescriptionIDParameter, descriptionParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<cuspProductInsert_Result> cuspProductInsert(string name, string productNumber, string color, Nullable<decimal> standardCost, Nullable<decimal> listPrice, string size, Nullable<decimal> weight, Nullable<int> productCategoryID, Nullable<int> productModelID, Nullable<System.DateTime> sellStartDate, Nullable<System.DateTime> sellEndDate, Nullable<System.DateTime> discontinuedDate, byte[] thumbNailPhoto, string thumbnailPhotoFileName, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var productNumberParameter = productNumber != null ?
                new ObjectParameter("ProductNumber", productNumber) :
                new ObjectParameter("ProductNumber", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var standardCostParameter = standardCost.HasValue ?
                new ObjectParameter("StandardCost", standardCost) :
                new ObjectParameter("StandardCost", typeof(decimal));
    
            var listPriceParameter = listPrice.HasValue ?
                new ObjectParameter("ListPrice", listPrice) :
                new ObjectParameter("ListPrice", typeof(decimal));
    
            var sizeParameter = size != null ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var productModelIDParameter = productModelID.HasValue ?
                new ObjectParameter("ProductModelID", productModelID) :
                new ObjectParameter("ProductModelID", typeof(int));
    
            var sellStartDateParameter = sellStartDate.HasValue ?
                new ObjectParameter("SellStartDate", sellStartDate) :
                new ObjectParameter("SellStartDate", typeof(System.DateTime));
    
            var sellEndDateParameter = sellEndDate.HasValue ?
                new ObjectParameter("SellEndDate", sellEndDate) :
                new ObjectParameter("SellEndDate", typeof(System.DateTime));
    
            var discontinuedDateParameter = discontinuedDate.HasValue ?
                new ObjectParameter("DiscontinuedDate", discontinuedDate) :
                new ObjectParameter("DiscontinuedDate", typeof(System.DateTime));
    
            var thumbNailPhotoParameter = thumbNailPhoto != null ?
                new ObjectParameter("ThumbNailPhoto", thumbNailPhoto) :
                new ObjectParameter("ThumbNailPhoto", typeof(byte[]));
    
            var thumbnailPhotoFileNameParameter = thumbnailPhotoFileName != null ?
                new ObjectParameter("ThumbnailPhotoFileName", thumbnailPhotoFileName) :
                new ObjectParameter("ThumbnailPhotoFileName", typeof(string));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspProductInsert_Result>("cuspProductInsert", nameParameter, productNumberParameter, colorParameter, standardCostParameter, listPriceParameter, sizeParameter, weightParameter, productCategoryIDParameter, productModelIDParameter, sellStartDateParameter, sellEndDateParameter, discontinuedDateParameter, thumbNailPhotoParameter, thumbnailPhotoFileNameParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual int cuspProductModelDelete(Nullable<int> productModelID)
        {
            var productModelIDParameter = productModelID.HasValue ?
                new ObjectParameter("ProductModelID", productModelID) :
                new ObjectParameter("ProductModelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspProductModelDelete", productModelIDParameter);
        }
    
        public virtual ObjectResult<cuspProductModelInsert_Result> cuspProductModelInsert(string name, string catalogDescription, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var catalogDescriptionParameter = catalogDescription != null ?
                new ObjectParameter("CatalogDescription", catalogDescription) :
                new ObjectParameter("CatalogDescription", typeof(string));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspProductModelInsert_Result>("cuspProductModelInsert", nameParameter, catalogDescriptionParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual int cuspProductModelProductDescriptionDelete(string culture)
        {
            var cultureParameter = culture != null ?
                new ObjectParameter("Culture", culture) :
                new ObjectParameter("Culture", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspProductModelProductDescriptionDelete", cultureParameter);
        }
    
        public virtual ObjectResult<cuspProductModelProductDescriptionInsert_Result> cuspProductModelProductDescriptionInsert(Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspProductModelProductDescriptionInsert_Result>("cuspProductModelProductDescriptionInsert", rowguidParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<cuspProductModelProductDescriptionSelect_Result> cuspProductModelProductDescriptionSelect(string culture)
        {
            var cultureParameter = culture != null ?
                new ObjectParameter("Culture", culture) :
                new ObjectParameter("Culture", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspProductModelProductDescriptionSelect_Result>("cuspProductModelProductDescriptionSelect", cultureParameter);
        }
    
        public virtual int cuspProductModelProductDescriptionUpdate(string culture, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var cultureParameter = culture != null ?
                new ObjectParameter("Culture", culture) :
                new ObjectParameter("Culture", typeof(string));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspProductModelProductDescriptionUpdate", cultureParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<cuspProductModelSelect_Result> cuspProductModelSelect(Nullable<int> productModelID)
        {
            var productModelIDParameter = productModelID.HasValue ?
                new ObjectParameter("ProductModelID", productModelID) :
                new ObjectParameter("ProductModelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspProductModelSelect_Result>("cuspProductModelSelect", productModelIDParameter);
        }
    
        public virtual int cuspProductModelUpdate(Nullable<int> productModelID, string name, string catalogDescription, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var productModelIDParameter = productModelID.HasValue ?
                new ObjectParameter("ProductModelID", productModelID) :
                new ObjectParameter("ProductModelID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var catalogDescriptionParameter = catalogDescription != null ?
                new ObjectParameter("CatalogDescription", catalogDescription) :
                new ObjectParameter("CatalogDescription", typeof(string));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspProductModelUpdate", productModelIDParameter, nameParameter, catalogDescriptionParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<cuspProductSelect_Result> cuspProductSelect(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspProductSelect_Result>("cuspProductSelect", productIDParameter);
        }
    
        public virtual int cuspProductUpdate(Nullable<int> productID, string name, string productNumber, string color, Nullable<decimal> standardCost, Nullable<decimal> listPrice, string size, Nullable<decimal> weight, Nullable<int> productCategoryID, Nullable<int> productModelID, Nullable<System.DateTime> sellStartDate, Nullable<System.DateTime> sellEndDate, Nullable<System.DateTime> discontinuedDate, byte[] thumbNailPhoto, string thumbnailPhotoFileName, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var productNumberParameter = productNumber != null ?
                new ObjectParameter("ProductNumber", productNumber) :
                new ObjectParameter("ProductNumber", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var standardCostParameter = standardCost.HasValue ?
                new ObjectParameter("StandardCost", standardCost) :
                new ObjectParameter("StandardCost", typeof(decimal));
    
            var listPriceParameter = listPrice.HasValue ?
                new ObjectParameter("ListPrice", listPrice) :
                new ObjectParameter("ListPrice", typeof(decimal));
    
            var sizeParameter = size != null ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(string));
    
            var weightParameter = weight.HasValue ?
                new ObjectParameter("Weight", weight) :
                new ObjectParameter("Weight", typeof(decimal));
    
            var productCategoryIDParameter = productCategoryID.HasValue ?
                new ObjectParameter("ProductCategoryID", productCategoryID) :
                new ObjectParameter("ProductCategoryID", typeof(int));
    
            var productModelIDParameter = productModelID.HasValue ?
                new ObjectParameter("ProductModelID", productModelID) :
                new ObjectParameter("ProductModelID", typeof(int));
    
            var sellStartDateParameter = sellStartDate.HasValue ?
                new ObjectParameter("SellStartDate", sellStartDate) :
                new ObjectParameter("SellStartDate", typeof(System.DateTime));
    
            var sellEndDateParameter = sellEndDate.HasValue ?
                new ObjectParameter("SellEndDate", sellEndDate) :
                new ObjectParameter("SellEndDate", typeof(System.DateTime));
    
            var discontinuedDateParameter = discontinuedDate.HasValue ?
                new ObjectParameter("DiscontinuedDate", discontinuedDate) :
                new ObjectParameter("DiscontinuedDate", typeof(System.DateTime));
    
            var thumbNailPhotoParameter = thumbNailPhoto != null ?
                new ObjectParameter("ThumbNailPhoto", thumbNailPhoto) :
                new ObjectParameter("ThumbNailPhoto", typeof(byte[]));
    
            var thumbnailPhotoFileNameParameter = thumbnailPhotoFileName != null ?
                new ObjectParameter("ThumbnailPhotoFileName", thumbnailPhotoFileName) :
                new ObjectParameter("ThumbnailPhotoFileName", typeof(string));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspProductUpdate", productIDParameter, nameParameter, productNumberParameter, colorParameter, standardCostParameter, listPriceParameter, sizeParameter, weightParameter, productCategoryIDParameter, productModelIDParameter, sellStartDateParameter, sellEndDateParameter, discontinuedDateParameter, thumbNailPhotoParameter, thumbnailPhotoFileNameParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual int cuspSalesOrderDetailDelete(Nullable<int> salesOrderDetailID)
        {
            var salesOrderDetailIDParameter = salesOrderDetailID.HasValue ?
                new ObjectParameter("SalesOrderDetailID", salesOrderDetailID) :
                new ObjectParameter("SalesOrderDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspSalesOrderDetailDelete", salesOrderDetailIDParameter);
        }
    
        public virtual ObjectResult<cuspSalesOrderDetailInsert_Result> cuspSalesOrderDetailInsert(Nullable<short> orderQty, Nullable<int> productID, Nullable<decimal> unitPrice, Nullable<decimal> unitPriceDiscount, Nullable<decimal> lineTotal, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var orderQtyParameter = orderQty.HasValue ?
                new ObjectParameter("OrderQty", orderQty) :
                new ObjectParameter("OrderQty", typeof(short));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var unitPriceDiscountParameter = unitPriceDiscount.HasValue ?
                new ObjectParameter("UnitPriceDiscount", unitPriceDiscount) :
                new ObjectParameter("UnitPriceDiscount", typeof(decimal));
    
            var lineTotalParameter = lineTotal.HasValue ?
                new ObjectParameter("LineTotal", lineTotal) :
                new ObjectParameter("LineTotal", typeof(decimal));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspSalesOrderDetailInsert_Result>("cuspSalesOrderDetailInsert", orderQtyParameter, productIDParameter, unitPriceParameter, unitPriceDiscountParameter, lineTotalParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<cuspSalesOrderDetailSelect_Result> cuspSalesOrderDetailSelect(Nullable<int> salesOrderDetailID)
        {
            var salesOrderDetailIDParameter = salesOrderDetailID.HasValue ?
                new ObjectParameter("SalesOrderDetailID", salesOrderDetailID) :
                new ObjectParameter("SalesOrderDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspSalesOrderDetailSelect_Result>("cuspSalesOrderDetailSelect", salesOrderDetailIDParameter);
        }
    
        public virtual int cuspSalesOrderDetailUpdate(Nullable<int> salesOrderDetailID, Nullable<short> orderQty, Nullable<int> productID, Nullable<decimal> unitPrice, Nullable<decimal> unitPriceDiscount, Nullable<decimal> lineTotal, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var salesOrderDetailIDParameter = salesOrderDetailID.HasValue ?
                new ObjectParameter("SalesOrderDetailID", salesOrderDetailID) :
                new ObjectParameter("SalesOrderDetailID", typeof(int));
    
            var orderQtyParameter = orderQty.HasValue ?
                new ObjectParameter("OrderQty", orderQty) :
                new ObjectParameter("OrderQty", typeof(short));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var unitPriceParameter = unitPrice.HasValue ?
                new ObjectParameter("UnitPrice", unitPrice) :
                new ObjectParameter("UnitPrice", typeof(decimal));
    
            var unitPriceDiscountParameter = unitPriceDiscount.HasValue ?
                new ObjectParameter("UnitPriceDiscount", unitPriceDiscount) :
                new ObjectParameter("UnitPriceDiscount", typeof(decimal));
    
            var lineTotalParameter = lineTotal.HasValue ?
                new ObjectParameter("LineTotal", lineTotal) :
                new ObjectParameter("LineTotal", typeof(decimal));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspSalesOrderDetailUpdate", salesOrderDetailIDParameter, orderQtyParameter, productIDParameter, unitPriceParameter, unitPriceDiscountParameter, lineTotalParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual int cuspSalesOrderHeaderDelete(Nullable<int> salesOrderID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspSalesOrderHeaderDelete", salesOrderIDParameter);
        }
    
        public virtual ObjectResult<cuspSalesOrderHeaderInsert_Result> cuspSalesOrderHeaderInsert(Nullable<byte> revisionNumber, Nullable<System.DateTime> orderDate, Nullable<System.DateTime> dueDate, Nullable<System.DateTime> shipDate, Nullable<byte> status, Nullable<bool> onlineOrderFlag, string salesOrderNumber, string purchaseOrderNumber, string accountNumber, Nullable<int> customerID, Nullable<int> shipToAddressID, Nullable<int> billToAddressID, string shipMethod, string creditCardApprovalCode, Nullable<decimal> subTotal, Nullable<decimal> taxAmt, Nullable<decimal> freight, Nullable<decimal> totalDue, string comment, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var revisionNumberParameter = revisionNumber.HasValue ?
                new ObjectParameter("RevisionNumber", revisionNumber) :
                new ObjectParameter("RevisionNumber", typeof(byte));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var shipDateParameter = shipDate.HasValue ?
                new ObjectParameter("ShipDate", shipDate) :
                new ObjectParameter("ShipDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var onlineOrderFlagParameter = onlineOrderFlag.HasValue ?
                new ObjectParameter("OnlineOrderFlag", onlineOrderFlag) :
                new ObjectParameter("OnlineOrderFlag", typeof(bool));
    
            var salesOrderNumberParameter = salesOrderNumber != null ?
                new ObjectParameter("SalesOrderNumber", salesOrderNumber) :
                new ObjectParameter("SalesOrderNumber", typeof(string));
    
            var purchaseOrderNumberParameter = purchaseOrderNumber != null ?
                new ObjectParameter("PurchaseOrderNumber", purchaseOrderNumber) :
                new ObjectParameter("PurchaseOrderNumber", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var shipToAddressIDParameter = shipToAddressID.HasValue ?
                new ObjectParameter("ShipToAddressID", shipToAddressID) :
                new ObjectParameter("ShipToAddressID", typeof(int));
    
            var billToAddressIDParameter = billToAddressID.HasValue ?
                new ObjectParameter("BillToAddressID", billToAddressID) :
                new ObjectParameter("BillToAddressID", typeof(int));
    
            var shipMethodParameter = shipMethod != null ?
                new ObjectParameter("ShipMethod", shipMethod) :
                new ObjectParameter("ShipMethod", typeof(string));
    
            var creditCardApprovalCodeParameter = creditCardApprovalCode != null ?
                new ObjectParameter("CreditCardApprovalCode", creditCardApprovalCode) :
                new ObjectParameter("CreditCardApprovalCode", typeof(string));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var taxAmtParameter = taxAmt.HasValue ?
                new ObjectParameter("TaxAmt", taxAmt) :
                new ObjectParameter("TaxAmt", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var totalDueParameter = totalDue.HasValue ?
                new ObjectParameter("TotalDue", totalDue) :
                new ObjectParameter("TotalDue", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspSalesOrderHeaderInsert_Result>("cuspSalesOrderHeaderInsert", revisionNumberParameter, orderDateParameter, dueDateParameter, shipDateParameter, statusParameter, onlineOrderFlagParameter, salesOrderNumberParameter, purchaseOrderNumberParameter, accountNumberParameter, customerIDParameter, shipToAddressIDParameter, billToAddressIDParameter, shipMethodParameter, creditCardApprovalCodeParameter, subTotalParameter, taxAmtParameter, freightParameter, totalDueParameter, commentParameter, rowguidParameter, modifiedDateParameter);
        }
    
        public virtual ObjectResult<cuspSalesOrderHeaderSelect_Result> cuspSalesOrderHeaderSelect(Nullable<int> salesOrderID)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<cuspSalesOrderHeaderSelect_Result>("cuspSalesOrderHeaderSelect", salesOrderIDParameter);
        }
    
        public virtual int cuspSalesOrderHeaderUpdate(Nullable<int> salesOrderID, Nullable<byte> revisionNumber, Nullable<System.DateTime> orderDate, Nullable<System.DateTime> dueDate, Nullable<System.DateTime> shipDate, Nullable<byte> status, Nullable<bool> onlineOrderFlag, string salesOrderNumber, string purchaseOrderNumber, string accountNumber, Nullable<int> customerID, Nullable<int> shipToAddressID, Nullable<int> billToAddressID, string shipMethod, string creditCardApprovalCode, Nullable<decimal> subTotal, Nullable<decimal> taxAmt, Nullable<decimal> freight, Nullable<decimal> totalDue, string comment, Nullable<System.Guid> rowguid, Nullable<System.DateTime> modifiedDate)
        {
            var salesOrderIDParameter = salesOrderID.HasValue ?
                new ObjectParameter("SalesOrderID", salesOrderID) :
                new ObjectParameter("SalesOrderID", typeof(int));
    
            var revisionNumberParameter = revisionNumber.HasValue ?
                new ObjectParameter("RevisionNumber", revisionNumber) :
                new ObjectParameter("RevisionNumber", typeof(byte));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var dueDateParameter = dueDate.HasValue ?
                new ObjectParameter("DueDate", dueDate) :
                new ObjectParameter("DueDate", typeof(System.DateTime));
    
            var shipDateParameter = shipDate.HasValue ?
                new ObjectParameter("ShipDate", shipDate) :
                new ObjectParameter("ShipDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(byte));
    
            var onlineOrderFlagParameter = onlineOrderFlag.HasValue ?
                new ObjectParameter("OnlineOrderFlag", onlineOrderFlag) :
                new ObjectParameter("OnlineOrderFlag", typeof(bool));
    
            var salesOrderNumberParameter = salesOrderNumber != null ?
                new ObjectParameter("SalesOrderNumber", salesOrderNumber) :
                new ObjectParameter("SalesOrderNumber", typeof(string));
    
            var purchaseOrderNumberParameter = purchaseOrderNumber != null ?
                new ObjectParameter("PurchaseOrderNumber", purchaseOrderNumber) :
                new ObjectParameter("PurchaseOrderNumber", typeof(string));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var shipToAddressIDParameter = shipToAddressID.HasValue ?
                new ObjectParameter("ShipToAddressID", shipToAddressID) :
                new ObjectParameter("ShipToAddressID", typeof(int));
    
            var billToAddressIDParameter = billToAddressID.HasValue ?
                new ObjectParameter("BillToAddressID", billToAddressID) :
                new ObjectParameter("BillToAddressID", typeof(int));
    
            var shipMethodParameter = shipMethod != null ?
                new ObjectParameter("ShipMethod", shipMethod) :
                new ObjectParameter("ShipMethod", typeof(string));
    
            var creditCardApprovalCodeParameter = creditCardApprovalCode != null ?
                new ObjectParameter("CreditCardApprovalCode", creditCardApprovalCode) :
                new ObjectParameter("CreditCardApprovalCode", typeof(string));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var taxAmtParameter = taxAmt.HasValue ?
                new ObjectParameter("TaxAmt", taxAmt) :
                new ObjectParameter("TaxAmt", typeof(decimal));
    
            var freightParameter = freight.HasValue ?
                new ObjectParameter("Freight", freight) :
                new ObjectParameter("Freight", typeof(decimal));
    
            var totalDueParameter = totalDue.HasValue ?
                new ObjectParameter("TotalDue", totalDue) :
                new ObjectParameter("TotalDue", typeof(decimal));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var rowguidParameter = rowguid.HasValue ?
                new ObjectParameter("rowguid", rowguid) :
                new ObjectParameter("rowguid", typeof(System.Guid));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("cuspSalesOrderHeaderUpdate", salesOrderIDParameter, revisionNumberParameter, orderDateParameter, dueDateParameter, shipDateParameter, statusParameter, onlineOrderFlagParameter, salesOrderNumberParameter, purchaseOrderNumberParameter, accountNumberParameter, customerIDParameter, shipToAddressIDParameter, billToAddressIDParameter, shipMethodParameter, creditCardApprovalCodeParameter, subTotalParameter, taxAmtParameter, freightParameter, totalDueParameter, commentParameter, rowguidParameter, modifiedDateParameter);
        }
    }
}
